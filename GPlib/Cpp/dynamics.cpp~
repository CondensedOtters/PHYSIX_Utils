//---------------
// External Libs
//-------------------
#include <fstream>
#include <iterator>
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>  
#include <stdlib.h>    
#include <math.h>
//---------------------

//----------------
// Internal Files
//-------------------------
#include "utils.h"
#include "atom.h"
#include "cell.h"
#include "contact_matrix.h"
#include "xyz.h"
#include "histogram.h"
#include "pdb.h"
#include "sim.h"
#include "lut.h"
#include "molecules.h"
//-------------------------

//================
// MAIN PROGRAM
//=====================================================================
int main( void )
{
  //--------
  // Input
  //---------------------------------
  std::ifstream input("TRAJEC.xyz");
  //---------------------------------

  //--------
  // Output
  //--------------------------------------------------------------------------------
  std::ofstream graph_molecules ( "graph_molecules.dat" ,  std::ios::out );
  //-------------------------------------------------------------------------------

  //----------------------
  // Physical parameters
  //--------------------------------------
  int step       = 1;  // Step counter
  int start_step = 2000; // Start step
  int end_step   = 1000000; // End step
  int comp_step  = 1; // Frequency of computation
  //--------------------------------------

  //---------------
  // Initializers
  //--------------------------------------------------
  AtomList  atom_list;  // Atoms in cell
  AllTypeLUT lut_list; // LUT for types
  ContactMatrix cm_connection;    // Contact Matrix
  ContactMatrix cm_distance;    // Contact Matrix
  //--------------------------------------------------

  //--------------  
  // Atom Indexes
  //------------------------------
  std::vector<int> atom_indexesC;
  std::vector<int> atom_indexesO;
  //------------------------------
  
  //--------------------
  // Reading Cell File
  //-------------------------------------------------------------------
  Cell cell;
  if ( ! readParamCell( "cell.param" , cell ) )
    {
      return 1;
    }
  //-------------------------------------------------------------------

  //-----------------
  // Reading Cut-Off
  //-------------------------------------------------------------------
  CutOffMatrix cut_off;
  if ( ! readCutOff( "cut_off.dat" , cut_off , lut_list ) )
    {
      return 1;
    }
  //-------------------------------------------------------------------

  //-------------------------------------------------------------------
  std::vector<std::vector<std::vector< double> > > all_r_co2;
  std::vector<std::vector<std::vector< double> > > all_r_co3;
  //-------------------------------------------------------------------

  std::vector<int> coordinance_lut;
  std::vector<int> atom_lut;

  //-------------------
  // Reading XYZ file
  //----------------------------------------------------
  while( readStepXYZfast( input , atom_list , lut_list, true, true ) )
    {
      if ( step % comp_step == 0 && step >= start_step && step < end_step)
	{

	  makeContactMatrix( cm_distance , atom_list, cell , cut_off , lut_list );
	  if ( step == start_step )
	    {
	      // Index
	      atom_indexesC = cm_distance.lut_list.types[0].atom_index;
	      atom_indexesO = cm_distance.lut_list.types[1].atom_index;
	    }
	  for ( int i=0 ; i < atom_list.index.size() ; i++ )
	    {
	      double c3 = getNNearest( cm_distance , 3 , atom_list.index[i] , atom_indexesO ) ;
	      double c4 = getNNearest( cm_distance , 4 , atom_list.index[i] , atom_indexesO ) ;
	      if ( c3 > 1.75 ) coordinance_lut[i] = 2;
	      else if ( c4 > 1.75 ) coordinance_lut[i] = 3;
	      else coordinance_lut[i] = 4;
	      if ( step == start_step )
		{
		  atom_lut[i] = i;
		}
	      
	    }
	  std::cout << step << std::endl;
	}
      step++;
    }
  //----------------------------------------------------
  
  
  return 0;
}
