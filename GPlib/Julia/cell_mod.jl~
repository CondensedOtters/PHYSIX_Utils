module cell_mod

export Cell_param, Cell_vec, Cell_matrix
export Cell
export vec2matrix, wrap, dist1D, distance, compressParams, compressAtoms

# Import all import module
#----------------------------
using atom_mod
using cube_mod
#----------------------------

#-------------
# Structures
#-----------------------------
mutable struct Cell_param
    length::Vector{Real}
    angles::Vector{Real}
    function Cell_param()
        new(zeros(Real,3),zeros(Real,3));
    end
    function Cell_param( params::Vector{T1} ) where { T1 <: Real }
        new(params,ones(Real,3)*90)
    end
    function Cell_param( a::T1, b::T2, c::T3 ) where { T1 <: Real, T2<: Real, T3 <: Real }
        new([a,b,c],[90.,90.,90.])
    end
    function Cell_param( a::T1, b::T2, c::T3, alpha::T4, beta::T5, gamma::T6 ) where { T1 <: Real, T2<: Real, T3 <: Real, T4 <: Real, T5 <: Real, T6 <: Real }
        new([a,b,c],[alpha,beta,gamma])
    end
end
mutable struct Cell_vec
    v1::Vector{Real}
    v2::Vector{Real}
    v3::Vector{Real}
    function Cell_vec( )
        new([],[],[]);
    end
    function Cell_vec( v1::Vector{T1} ) where { T1 <: Real }
        if size(v1)[1] == 3
            v2    = zeros(3)
            v3    = zeros(3)
            v2[2] = v1[1]
            v3[3] = v1[1]
            new( v1, v2, v3)
        else
            print("Error building vector !\n")
            new( [], [], [] )
        end
    end
    function Cell_vec( v1::Vector{T1}, v2::Vector{T2}, v3::Vector{T3} ) where { T1 <: Real, T2 <: Real, T3 <: Real }
        if size(v1)[1] == 3 && size(v2)[1] == 3 && size(v3)[1] == 3
            new( v1, v2, v3 )
        else
            print("Error building vector !\n")
            new( [], [], [] )
        end
    end
end
mutable struct Cell_matrix
    matrix::Array{Real,2}
    function Cell_matrix()
        new(Array{Real}(3,3));
    end
    function Cell_matrix( matrix::Array{T1}) where { T1 <: Real }
        if size(matrix)[1]==3 && size(matrix)[2]==3
            new( matrix )
        end
    end
    function Cell_matrix( a::T1, b::T1, c::T1 ) where { T1 <: Real }
        new( [ [ a, 0, 0 ], [ 0, b, 0 ] , [ 0, 0, c ] ] )
    end
    function Cell_matrix( v1::Vector{T1}, v2::Vector{T2}, v3::Vector{T3} ) where { T1 <: Real, T2 <: Real, T3 <: Real }
        if size(v1)[1] == 3 && size(v2)[1] == 3 && size(v3)[1] == 3
            new( [ v1, v2, v3 ] )
        else
            print("Error building matrix!\n")
            new( Array{Real}( 3, 3 ) )
        end
    end
end
#------------------------------

#------------------------------
# General type and conversions
#--------------------------------------------
Cell=Union{Cell_param, Cell_vec, Cell_matrix}
#---------------------------------------------

function cellMatrix2Params( cell_matrix::Array{T1,2} )  where { T1 <: Real }
    params=zeros(Real,3)
    for i=1:size(cell_matrix)[1]
        for j=1:size(cell_matrix)[2]
            params[i] += cell_matrix[i,j]*cell_matrix[i,j]
        end
        params[i] = sqrt( params[i])
    end
    return params
end

#---------------------------------------------------------------------------\
function vec2matrix( vectors::T1 ) where { T1 <: Cell_vec }
    matrix=Cell_matrix()
    for i=1:3
        matrix.matrix[i,1] = vectors.v1[i]
    end
    for i=1:3
        matrix.matrix[i,2] = vectors.v2[i]
    end
    for i=1:3
        matrix.matrix[i,3] = vectors.v3[i]
    end
    return matrix
end
#---------------------------------------------------------------------------\

#-------------------------------------------------------------------------------
function wrap( position::T1, length::T2 ) where { T1 <: Real, T2 <: Real}
    sign=-1
    if position < 0
        sign=1
    end
    while position < 0 || position > length
        position = position + sign*length
    end
    return position
end
function wrap( atoms::T1, cell::T2 ) where { T1 <: atom_mod.AtomList, T2 <: Cell_matrix }
    # Computes cell parameters
    #--------------------------------------------
    params=[0.,0.,0.]
    for i=1:3
        for j=1:3
            params[i]=params[i]+cell.matrix[i,j]
        end
    end
    #--------------------------------------------

    #---------------
    # Compute atoms
    #---------------------------------
    for i=1:size(atoms.positions)[1]
        for j=1:3
            atoms.positions[i,j] = wrap( atoms.positions[i,j],params[j])
        end
    end
    #----------------------------------

    return atoms
end
function wrap( atoms::T1, cell::T2 ) where { T1 <: atom_mod.AtomList, T2 <: Cell_param }
    for i=1:size(atoms.positions)[1]
        for j=1:3
            atoms.positions[i,j] = wrap( atoms.positions[i,j],cell.length[j])
        end
    end
    return atoms
end
function wrap( molecules::T1, cell::T2 ) where { T1 <: atom_mod.AtomMolList, T2 <: Cell_param }
    for i=1:size(molecules.positions)[1]
        for j=1:3
            molecules.positions[i,j] = wrap( molecules.positions[i,j],cell.length[j])
        end
    end
    return molecules
end
function wrap( positions::Array{T1,2}, cell::T2 ) where { T1 <: Real, T2 <: Cell_param }
    for j=1:size(positions)[1]
        for i=1:3
            positions[j,i] = wrap( positions[j,i],cell.length[i] )
        end
    end
    return positions
end
function wrap( positions::Vector{T1}, cell::T2 ) where { T1 <: Real, T2 <: Cell_param }
    for i=1:3
        positions[i] = wrap( positions[i],cell.length[i] )
    end
    return positions
end
#-------------------------------------------------------------------------------

# Distance related functions
#-------------------------------------------------------------------------------
function dist1D( x1::T1, x2::T2, a::T3 ) where { T1 <: Real, T2 <: Real, T3 <: Real }
    dx=x1-x2
    if dx > a*0.5
        dx -= a
    end
    if dx < -a*0.5
        dx += a
    end
    return dx*dx
end
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
function distance( positions::Array{T1,2}, cell::T2, atom1::T3, atom2::T4 ) where { T1 <: Real,  T2 <: Cell_param, T3 <: Real, T4 <: Real }
    dist=0
    for i=1:3
        temp = dist1D(positions[atom1,i],positions[atom2,i],cell.length[i])
        dist += temp*temp
    end
    return sqrt(dist)
end
function distance( positions1::Vector{T1}, positions2::Vector{T2}, cell_length::Vector{T3} ) where { T1 <: Real, T2 <: Real, T3 <: Real }
    dist=0
    for i=1:3
        temp=dist1D(positions1[i],positions2[i],cell_length[i])
        dist += temp*temp
    end
    return sqrt(dist)
end
function distance( atoms::T1, cell::T2, index1::T3, index2::T4 ) where { T1 <: atom_mod.AtomList, T2 <: Cell_param , T3 <: Int, T4 <: Int }
    dis=0
    for i=1:3
        dis += dist1D( atoms.positions[index1,i],atoms.positions[index2,i], cell.length[i] )
    end
    return sqrt(dis)
end
function distance( molecules::T1, cell::T2, index1::T3, index2::T4 ) where { T1 <: atom_mod.AtomMolList, T2 <: Cell_param , T3 <: Int , T4 <: Int }
    dist=0
    for i=1:3
        dist += dist1D( molecules.positions[index1,i],molecules.positions[index2,i], cell.length[i] )
    end
    return sqrt(dist)
end
function distance( atoms::T1, cell::T2, index1::T3, index2::T3, wrap::T4 ) where { T1 <: atom_mod.AtomList, T2 <: Cell_param,  T3 <: Int, T4 <: Bool }
    if (  wrap )
        wrap(atoms,cell)
    end
    return distance(atoms,cell,index1,index2)
end
#---------------------------------------------------------------------------

#----------
# Compress
#---------------------------------------------------------------------------
function compressParams( cell::T1, fracs::Vector{T2} ) where { T1 <: Cell_param, T2 <: Real }
    for i=1:3
        cell.lengths[i] *= fracs[i]
    end
    return cell
end
#---------------------------------------------------------------------------
function compressAtoms( atoms::T1 , cell::T2, fracs::Vector{T3} ) where { T1 <: atom_mod.AtomList, T2 <: Cell_param, T3 <: Real }
    for i=1:size(atoms.names)[1]
        for j=1:3
            atoms.positions[i,j] *= fracs[j]
        end
    end
    return atoms
end
#---------------------------------------------------------------------------

end
