#!/bin/bash

#======================#
# QE Input Generator   #
#======================#

#--------------------------------------------------#
# Function file to write the input of the function #
# for the ab initio meta batch script              #
#--------------------------------------------------#

#-------
# Inputs
#--------------------------------------------------------------------------------------------------------
#   - sim_type           # Type of the simulation
#   - structure_name     # Name of the structure
#   - VdW_corr           # (Optionnal) Nature of the Van Der Walls correction
#   - func_type          # Type of functionnal used
#   - n_type             # Number of different atomic species
#   - press_value        # Pressure to be used in vc calculations 
#   - temp_value         # Temperature to be used in md calculations
#   - atomic_pos_path    # Path to the file containing the atomic positions
#   - pseudo_path        # Path to the director
#   - ecutwfc, ecutrho   # Cut-off energy fot the electronic wavefunction and density
#   - localworkdir       # Path of the working directory
#   - a,b,c              # Lattice parameters
#   - alpha,beta,gamma   # Lattice angles
#   - kx, ky, kz         # (Optionnal) number of k points in reciprocal space to sample
#   - input_pos          # Type of atomic positions to place the atoms ( cf QE PWscf input doc)
#   - cell_factor        # (Optionnal) Parameter used in order the cell in order to create the pseudopotential 
#   - n_step             # (Optionnal or Required depending on sim_type) Max number of step of the simulation
#   - electron_maxstep   # (Optionnal) Maximum number of incrementation of scf cycles
#--------------------------------------------------------------------------------------------------------

#-------
# Output
#----------------------------
#  - 0 if successful
#  - 1 if insufficient input
#----------------------------

#-------
# Checks
#-------
# Checking if all necessary data are here
if [[ $sim_type == "" ]] || [[ $pseudo_path == "" ]] || [[ $n_type == "" ]] || [[ $ecutwfc == "" ]] || [[ $ecutrho == "" ]] || [[ $localworkdir == "" ]] || [[ $a == "" ]] || [[ $b == "" ]] || [[ $c == "" ]] || [[ $alpha == "" ]] || [[ $beta == "" ]] || [[ $gamma == "" ]] || [[ $input_pos == "" ]] || [[ $atomic_pos_path == "" ]]
then 
    # Printing all the variables to see which one is missing
    cat > "error" <<EOF
structure_name=$structure_name
sim_type=$sim_type
pseudo_path=$pseudo_path
n_type=$n_type
ecutwfc=$ecutwfc
ecutrho=$ecutrho
localworkdir=$localworkdir
atomic_pos_path=$atomic_pos_path
a=$a
b=$b
c=$c
alpha=$alpha
beta=$beta
gamma=$gamma
input_pos=$input_pos
EOF
    echo "1"
    exit
fi

echo $temp

#-----------------
# Data acquisition
#-----------------
# Reading position file to get n_atomes
typeset -i i=0
while read line
do
    i=$i+1
done < $atomic_pos_path
n_atomes=$i

# Constructing the prefix name
run=$structure_name"."$sim_type"."$func_type
# If there are VdW correction, putting them in the name of the run
if [[ $VdW_corr != "" ]]
then
    run=$run"."$VdW_corr
fi
# If there is a pressure value, putting it on the name
if [[ $pres_value != "" ]]
then
    run=$run"."$pres_value"kbar"
fi
# Same thing for temperature
if [[ $temp_value != "" ]]
then
    run=$run"."$temp_value"K"
fi
run=$run"."$ecutwfc"Ry."$ecutrho"Ry"

#------------------------
# Writting the input file
#------------------------
# Control sequence
cat > $localworkdir"/pw.d" <<EOF

&control
  calculation = '$sim_type'
  restart_mode = 'from_scratch'
  prefix = '$run'
  pseudo_dir = '$pseudo_path'
  tstress = .true.
  tprnfor = .true.
  outdir = './'
  verbosity = 'high'
  nstep = $n_step
/

&system
  ibrav = $ibrav
EOF

# Depending on ibrav, we use celldim(2-6) or not...
coorda=$(echo "scale=4; "$a"/0.53" | bc -l )
echo "  celldm(1) = $coorda" >> $localworkdir"/pw.d"
if [[ $ibrav == "4" ]] || [[ $ibrav == "6" ]] || [[ $ibrav == "7" ]]
then
    coordc=$(echo "scale=4; "$c"/"$a | bc -l)
    echo "  celldm(3) = "$coordc >> $localworkdir"/pw.d"
elif [[ $ibrav == "5" ]] ||  [[ $ibrav == "-5" ]]
then
    gammarad=$(echo "scale=4; "$gamma"*3.14/180" | bc -l )
    cosgamma=$(echo "scale=4; c("$gammarad")" | bc -l )
    echo "  celldm(4) = "$cosgamma >> $localworkdir"/pw.d"
elif [[ $ibrav == "8" ]] || [[ $ibrav == "9" ]] || [[ $ibrav == "10" ]] || [[ $ibrav == "11" ]] || [[ $ibrav == "-9" ]]
then
    coordb=$(echo "scale=4; "$b"/"$a | bc -l)
    coordc=$(echo "scale=4; "$c"/"$a | bc -l)
    echo "  celldm(2) = "$coordb >> $localworkdir"/pw.d"
    echo "  celldm(3) = "$coordc >> $localworkdir"/pw.d"
elif [[ $ibrav == "12" ]] || [[ $ibrav == "13" ]]
then
    coordb=$(echo "scale=4; "$b"/"$a | bc -l)
    coordc=$(echo "scale=4; "$c"/"$a | bc -l)
    gammarad=$(echo "scale=4; "$gamma"*3.14/180" | bc -l )
    cosgamma=$(echo "scale=4; c("$gammarad")" | bc -l )
    echo "  celldm(2) = "$coordb >> $localworkdir"/pw.d"
    echo "  celldm(3) = "$coordc >> $localworkdir"/pw.d"
    echo "  celldm(4) = "$cosgamma >> $localworkdir"/pw.d"
elif [[ $ibrav == "14" ]]
then
    coordb=$(echo "scale=4; "$b"/"$a | bc -l) 
    coordc=$(echo "scale=4; "$c"/"$a | bc -l)
    alpharad=$(echo "scale=4; "$alpha"*3.14/180" | bc -l )
    cosalpha=$(echo "scale=4; c("$alpharad")" | bc -l )
    betarad=$(echo "scale=4; "$beta"*3.14/180" | bc -l )
    cosbeta=$(echo "scale=4; c("$betarad")" | bc -l )
    gammarad=$(echo "scale=4; "$gamma"*3.14/180" | bc -l )
    cosgamma=$(echo "scale=4; c("$gammarad")" | bc -l )
    echo "  celldm(2) = "$coordb >> $localworkdir"/pw.d"
    echo "  celldm(3) = "$coordc >> $localworkdir"/pw.d"
    echo "  celldm(4) = "$cosalpha >> $localworkdir"/pw.d"
    echo "  celldm(5) = "$cosbeta >> $localworkdir"/pw.d"
    echo "  celldm(6) = "$cosgamma >> $localworkdir"/pw.d"
elif [[ $ibrav == "-12" ]]
then
    coordb=$(echo "scale=4; "$b"/"$a | bc -l) 
    coordc=$(echo "scale=4; "$c"/"$a | bc -l)
    betarad=$(echo "scale=4; "$beta"*3.14/180" | bc -l )
    cosbeta=$(echo "scale=4; c("$betarad")" | bc -l )
    echo "  celldm(2) = "$coordb >> $localworkdir"/pw.d" 
    echo "  celldm(3) = "$coordc >> $localworkdir"/pw.d"
    echo "  celldm(5) = "$cosbeta >> $localworkdir"/pw.d"
fi

cat >> $localworkdir"/pw.d" <<EOF
  nat = $n_atomes
  ntyp = $n_type
  ecutwfc = $ecutwfc
  ecutrho = $ecutrho
/

&electrons
  electron_maxstep = $electron_maxstep
  mixing_mode = 'plain'
  mixing_beta = 0.3
  conv_thr = 1.0d-12
/

&ions
EOF

# ions sequence
# to be added later 

cat >> $localworkdir"/pw.d" <<EOF
/

&cell
EOF

# cell sequence
echo "  press = "$pres_value >> $localworkdir"/pw.d"
echo "  cell_factor = "$cell_factor >> $localworkdir"/pw.d"
cat >> $localworkdir"/pw.d" <<EOF
/

ATOMIC_SPECIES
EOF
# Atomic types
if [ ! -e $localworkdir"/atom_species" ]
then
    echo "2"
    exit
fi
i=0
while read line
do
    # Getting data
    atom_type=$(echo $line | cut -d " " -f1)
    mass_atom_type=$(echo $line | cut -d " " -f2)
    pseudo=$(echo $line | cut -d " " -f3)
    # Writting data
    echo $atom_type" "$mass_atom_type" "$pseudo >> $localworkdir"/pw.d"
done < $localworkdir"/atom_species"

cat >> $localworkdir"/pw.d" <<EOF

ATOMIC_POSITIONS $input_pos
EOF
if [ ! -e $atomic_pos_path ]
then
    echo "3"
    exit
fi
# Atomic positions
while read line
do
    echo $line >> $localworkdir"/pw.d"
done < $atomic_pos_path

cat >> $localworkdir"/pw.d" <<EOF

K_POINTS automatic
$kx $ky $kz 1 1 1
EOF

echo 0